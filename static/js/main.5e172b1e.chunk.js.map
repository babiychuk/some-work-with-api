{"version":3,"sources":["components/table.js","App.js","serviceWorker.js","index.js"],"names":["Table","jsonData","this","props","data","react_default","a","createElement","className","Object","keys","map","keyName","key","id","title","description","scoreDisplayMode","score","React","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","_this2","fetch","then","res","json","setState","lighthouseResult","audits","console","log","table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAgCeA,mLA3BP,IAAMC,EAAWC,KAAKC,MAAMC,KAC5B,OAEQC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cACbH,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,UACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,QACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,gBAGJC,OAAOC,KAAKT,GAAUU,IAAI,SAACC,EAAQC,GAAT,OACtBR,EAAAC,EAAAC,cAAA,MAAIM,IAAKZ,EAASW,GAASE,GAAIN,UAAWK,EAAM,GAAK,EAAI,OAAS,OAC9DR,EAAAC,EAAAC,cAAA,UAAKM,EAAI,GACTR,EAAAC,EAAAC,cAAA,MAAIQ,MAAOd,EAASW,GAASI,aAAcf,EAASW,GAASG,OAC7DV,EAAAC,EAAAC,cAAA,UAAKN,EAASW,GAASK,kBACvBZ,EAAAC,EAAAC,cAAA,UAAgC,MAA3BN,EAASW,GAASM,MAAgB,EAAIjB,EAASW,GAASM,kBApBrEC,IAAMC,WCsCXC,cAnCX,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAb,OAAAc,EAAA,EAAAd,CAAAP,KAAAmB,IACfC,EAAAb,OAAAe,EAAA,EAAAf,CAAAP,KAAAO,OAAAgB,EAAA,EAAAhB,CAAAY,GAAAK,KAAAxB,KAAMC,KAEDwB,MAAQ,CACTvB,KAAM,GACNwB,UAAU,GALCN,oFASE,IAAAO,EAAA3B,KACjB4B,MAAM,qFACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACFJ,EAAKK,SAAS,CACVN,UAAU,EACVxB,KAAM6B,EAAKE,iBAAiBC,4CAQxC,OAFiBlC,KAAKyB,MAAjBC,UAIIS,QAAQC,IAAIpC,KAAKyB,MAAMvB,MAExBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACgC,EAAD,CAAOnC,KAAMF,KAAKyB,MAAMvB,SAJ5BC,EAAAC,EAAAC,cAAA,kCA1BEY,IAAMC,uBCSJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.5e172b1e.chunk.js","sourcesContent":["import React from 'react';\n\nclass Table extends React.Component {\n\n    render() {\n        const jsonData = this.props.data;\n        return (\n\n                <table className=\"jsonAudits\">\n                    <caption>Test wokr by Evgeniy Babiychuk (093-589-50-84)</caption>\n                    <tr>\n                        <th className=\"thNumber\">Number</th>\n                        <th className=\"thNameAudit\">Name audit</th>\n                        <th className=\"thMode\">Mode</th>\n                        <th className=\"thScoreAudit\">Score audit</th>\n                    </tr>\n                {\n                    Object.keys(jsonData).map((keyName,key) => (\n                        <tr key={jsonData[keyName].id} className={key % 2 == 0 ? \"even\" : \"odd\"}>\n                            <td>{key+1}</td>\n                            <td title={jsonData[keyName].description}>{jsonData[keyName].title}</td>\n                            <td>{jsonData[keyName].scoreDisplayMode}</td>\n                            <td>{jsonData[keyName].score == null ? 0 : jsonData[keyName].score}</td>\n                        </tr>\n                    ))\n                }\n                </table>\n\n        );\n    }\n}\n\nexport default Table;\n","import React from 'react';\nimport Table from './components/table';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            isLoaded: false,\n        };\n    }\n\n    componentWillMount() {\n        fetch(\"https://www.googleapis.com/pagespeedonline/v5/runPagespeed/?url=https://habr.com/\")\n            .then(res => res.json())\n            .then(json => {\n                this.setState({\n                    isLoaded: true,\n                    data: json.lighthouseResult.audits,\n                })\n            })\n    }\n\n    render(){\n        var {isLoaded} = this.state;\n\n        if (!isLoaded){\n         return <div> Loading... </div>;\n        } else { console.log(this.state.data);\n            return(\n                <div className=\"main\">\n                    <Table data={this.state.data}/>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css'\nimport './components/table.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}